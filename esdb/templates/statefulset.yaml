apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "esdb.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "esdb.labels" . | nindent 4 }}
  {{- with .Values.deployment.annotations }}
  annotations:
    {{- toYaml . | nindent 4}}
  {{- end }}
spec:
  serviceName: {{ include "esdb.fullname" . }}
  selector:
    matchLabels:
      {{- include "esdb.labels" . | nindent 6 }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  replicas: {{ .Values.deployment.clusterSize }}
  template:
    metadata:
      labels:
        {{- include "esdb.labels" . | nindent 8 }}
      {{- with .Values.deployment.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8}}
      {{- end}}
    spec:
      serviceAccountName: {{ include "esdb.serviceAccountName" . }}
      {{- with .Values.deployment.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      containers:
        - name: esdb
          image: '{{ .Values.deployment.image.repository }}:{{ .Values.deployment.image.tag | default (print .Chart.AppVersion "-bionic") }}'
          imagePullPolicy: {{ .Values.deployment.image.pullPolicy }}
          {{- with .Values.deployment.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{end}}
          env:
            - name: NODE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          # Load the correct config (generated in config.yaml)
          args: [ '--config=/config/$(NODE)' ]
          ports:
            - containerPort: 1113
              name: tcp
              protocol: TCP
            - containerPort: 2113
              name: grpcs
              protocol: TCP
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /certs/node
              name: node-certs
              readOnly: true
            - mountPath: /certs/ca
              name: ca-certs
              readOnly: true
            - mountPath: /config
              name: config
              readOnly: true
            - mountPath: /data/db
              name: data
            - mountPath: /data/logs
              name: logs

          # The /health/live endpoint fails when the cluster is invalid
          # So we need to give the node time to join the cluster
          livenessProbe:
            exec:
              command: ['curl', 'https://localhost:2113/health/live', '--fail', '--silent', '--cacert', '/certs/ca/ca.crt']
            failureThreshold: {{ .Values.deployment.liveness.failureThreshold }}
            periodSeconds: {{ .Values.deployment.liveness.periodSeconds }}
              
          # No readiness probe is defined, because the clients will determine the best node
          # Even if the node is not ready, it should still be exposed to the clients
          # This may need revisiting however

        {{- if .Values.backup.enable }}
        - name: backup
          image: '{{ .Values.backup.image.repository }}:{{ .Values.backup.image.tag }}'
          imagePullPolicy: '{{ .Values.backup.image.pullPolicy }}'
          env:
            - name: NODE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ASPNETCORE_URLS
              value: ""
          command: 
            - '/bin/sh'
            - '-c'
            - |
              cp /certs/ca/*.crt /usr/local/share/ca-certificates/ && update-ca-certificates 
              exec dotnet EventStoreBackup.dll --config /config/$(NODE)-backup
          ports:
            - containerPort: 443
              name: backup
              protocol: TCP
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /certs/node
              name: node-certs
              readOnly: true
            - mountPath: /certs/ca
              name: ca-certs
              readOnly: true
            - mountPath: /config
              name: config
              readOnly: true
            - mountPath: /data/db
              name: data
              readOnly: true
            - mountPath: /tmp
              name: backup-tmp
          livenessProbe:
            httpGet:
              path: /healthz-live
              port: backup
              scheme: HTTPS
            failureThreshold: {{ .Values.deployment.liveness.failureThreshold }}
            periodSeconds: {{ .Values.deployment.liveness.periodSeconds }}
        {{- end }}

      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}  
      {{- with .Values.deployment.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.deployment.terminationGracePeriodSeconds }}

      restartPolicy: Always
      
      volumes:
        - name: config
          configMap:
            name: {{ include "esdb.fullname" $}}-config
            defaultMode: 0440
        - name: node-certs
          secret:
            secretName: {{ include "esdb.fullname" $}}-certs
            defaultMode: 0440
        - name: ca-certs
          secret:
            secretName: {{ include "esdb.fullname" $}}-certs
            defaultMode: 0440
            items:
              - key: ca.crt
                path: ca.crt
              - key: ca.key
                path: ca.key
        {{- if not .Values.deployment.logs.persist }}
        - name: logs
          emptyDir: {}
        {{- end }}
        {{- if .Values.backup.enable }}
        - name: backup-tmp
          emptyDir: {}
        {{- end }}

  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "esdb.labels" . | nindent 10 }}
        {{- with .Values.deployment.storage.annotations }}
        annotations:
          {{ . | toYaml | nindent 10 }}
        {{- end }}
      spec:
        storageClassName: {{ .Values.deployment.storage.class }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.deployment.storage.size }}
  {{- if .Values.deployment.logs.persist }}
    - metadata:
        name: logs
        labels:
          {{- include "esdb.labels" . | nindent 10 }}
        {{- with .Values.deployment.logs.storage.annotations }}
        annotations:
          {{ . | toYaml | nindent 10 }}
        {{- end }}
      spec:
        storageClassName: {{ .Values.deployment.logs.storage.class }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.deployment.logs.storage.size }}
  {{- end }}